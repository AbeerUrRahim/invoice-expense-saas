using InvoiceApp.API.Data;
using InvoiceApp.API.Model;
using Microsoft.EntityFrameworkCore;
using System.Security.Claims;

public class InvoiceManager : IManager
{
    private readonly AppDbContext _context;

    public InvoiceManager(AppDbContext context)
    {
        _context = context;
    }

    // ✅ Get All Invoices
    public async Task<ApiResponse> GetAllAsync(ClaimsPrincipal _User)
    {
        var apiResponse = new ApiResponse();
        try
        {
            var invoices = await _context.Invoices
    .Where(i => i.Action != "D")
    .ToListAsync();
            //var invoices = await _context.Invoices.ToListAsync();
            if (invoices==null && invoices.Count==0)
            {
                apiResponse.statusCode = StatusCodes.Status404NotFound.ToString();
                apiResponse.message = "No Record Found";
                return apiResponse;
            }
            apiResponse.statusCode = StatusCodes.Status200OK.ToString();
            apiResponse.data = invoices;
            return apiResponse;
        }
        catch (Exception e)
        {
            string innerexp = e.InnerException == null ? e.Message : e.Message + " Inner Error : " + e.InnerException.ToString();
            apiResponse.statusCode = StatusCodes.Status405MethodNotAllowed.ToString();
            apiResponse.message = innerexp;
            return apiResponse;

        }
    }

    // ✅ Get Invoice By Id
    public async Task<ApiResponse> GetByIdAsync(Guid id, ClaimsPrincipal _User)
    {
        var apiResponse = new ApiResponse();
        try
        {
            Console.WriteLine("the id is jshjkahkd "+id);
        var invoice = await _context.Invoices.FindAsync(id);
            if (invoice==null)
            {
                apiResponse.statusCode = StatusCodes.Status404NotFound.ToString();
                apiResponse.message = "No Record Found";
                return apiResponse;
            }
            apiResponse.statusCode = StatusCodes.Status200OK.ToString();
            apiResponse.data = invoice;
            return apiResponse;

        }
        catch (Exception e)
        {

            string innerexp = e.InnerException == null ? e.Message : e.Message + " Inner Error : " + e.InnerException.ToString();
            apiResponse.statusCode = StatusCodes.Status405MethodNotAllowed.ToString();
            apiResponse.message = innerexp;
            return apiResponse;
        }

    }

    //  Create Invoice (Admin Only)
    public async Task<ApiResponse> CreateAsync(object model, ClaimsPrincipal _User)
    {
        // Role check
        var invoiceModel = model as InvoiceAddModel;
        var apiResponse = new ApiResponse();
        var userId = _User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (!_User.IsInRole("Admin"))
        {
            apiResponse.statusCode = StatusCodes.Status401Unauthorized.ToString();
            apiResponse.message="Only admin can create invoices";
            return apiResponse;
        }
        if (invoiceModel == null)
        {
            apiResponse.statusCode = StatusCodes.Status405MethodNotAllowed.ToString();
            apiResponse.message = "Invalid Class: Expected TeacherAddModel";
            return apiResponse;
        }
        if (invoiceModel.Amount<0)
        {
            apiResponse.statusCode = StatusCodes.Status400BadRequest.ToString();
            apiResponse.message = "Invalid Amount";
            return apiResponse;
        }
        bool TitleExist = await _context.Invoices.AnyAsync(i => i.Title.Trim() == invoiceModel.Title);
        if (TitleExist)
        {
            apiResponse.statusCode = StatusCodes.Status409Conflict.ToString();
            apiResponse.message = "Title already exist";
        }
        var invoice = new Invoice
        {
            Id = Guid.NewGuid(), 
            Title = invoiceModel.Title,
            Amount = invoiceModel.Amount,
            CustomerName=invoiceModel.CustomerName,
            InvoiceNumber=invoiceModel.InvoiceNumber, //autogenerated by backend
            InvoiceDate= invoiceModel.InvoiceDate,
            Remarks =invoiceModel.Remarks,
            Action=invoiceModel.Action,
            CreatedAt = DateTime.UtcNow,
            CreatedBy = userId
        };

        _context.Invoices.Add(invoice);
        await _context.SaveChangesAsync();

        apiResponse.statusCode = StatusCodes.Status200OK.ToString();
        apiResponse.message= "Invoice created successfully";
        return apiResponse;
    }
    public async Task<ApiResponse> UpdateAsync(object model, ClaimsPrincipal _User)
    {
        var invoiceModel = model as InvoiceUpdateModel; // use UpdateModel instead of AddModel
        var apiResponse = new ApiResponse();
        var userId = _User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        // Role check
        if (!_User.IsInRole("Admin"))
        {
            apiResponse.statusCode = StatusCodes.Status401Unauthorized.ToString();
            apiResponse.message = "Only admin can update invoices";
            return apiResponse;
        }

        // Model validation
        if (invoiceModel == null)
        {
            apiResponse.statusCode = StatusCodes.Status405MethodNotAllowed.ToString();
            apiResponse.message = "Invalid Class: Expected InvoiceUpdateModel";
            return apiResponse;
        }

        if (invoiceModel.Amount < 0)
        {
            apiResponse.statusCode = StatusCodes.Status400BadRequest.ToString();
            apiResponse.message = "Invalid Amount";
            return apiResponse;
        }

        // Check if invoice exists
        var invoice = await _context.Invoices.FirstOrDefaultAsync(i => i.Id == invoiceModel.Id);
        Console.WriteLine( invoice);
        if (invoice == null)
        {
            apiResponse.statusCode = StatusCodes.Status404NotFound.ToString();
            apiResponse.message = "Invoice not found";
            return apiResponse;
        }

        // Check for duplicate title (excluding current invoice)
        bool TitleExist = await _context.Invoices
            .AnyAsync(i => i.Title.Trim() == invoiceModel.Title && i.Id != invoiceModel.Id);

        if (TitleExist)
        {
            apiResponse.statusCode = StatusCodes.Status409Conflict.ToString();
            apiResponse.message = "Title already exists";
            return apiResponse;
        }

        // Update fields
        invoice.Title = invoiceModel.Title;
        invoice.Amount = invoiceModel.Amount;
        invoice.CustomerName = invoiceModel.CustomerName;
        invoice.Remarks = invoiceModel.Remarks;
        invoice.InvoiceDate = invoiceModel.InvoiceDate; // only date
        invoice.Action = invoiceModel.Action;
        invoice.UpdatedAt = DateTime.UtcNow;
        invoice.UpdatedBy = userId; 

        _context.Invoices.Update(invoice);
        await _context.SaveChangesAsync();

        apiResponse.statusCode = StatusCodes.Status200OK.ToString();
        apiResponse.message = "Invoice updated successfully";
        return apiResponse;
    }


    // ✅ Delete Invoice (Admin Only)
    public async Task<ApiResponse> DeleteAsync(Guid id, ClaimsPrincipal _User)
    {
        var apiResponse = new ApiResponse();

        if (!_User.IsInRole("Admin"))
        {
            apiResponse.statusCode = StatusCodes.Status401Unauthorized.ToString();
            apiResponse.message = "Only admins can delete invoices";
            return apiResponse; 
        }

        var invoice = await _context.Invoices.FindAsync(id);
        if (invoice == null)
        {
            apiResponse.statusCode = StatusCodes.Status404NotFound.ToString();
            apiResponse.message = "Invoice not found";
            return apiResponse;
        }

        invoice.Action = "D";
        _context.Invoices.Update(invoice); 

        await _context.SaveChangesAsync();

        apiResponse.statusCode = StatusCodes.Status200OK.ToString();
        apiResponse.message = "Invoice deleted successfully";
        return apiResponse;
    }


}
